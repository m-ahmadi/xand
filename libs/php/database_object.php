<?phprequire_once(LIBRARY . 'database.php');class DatabaseObject {			public static function find_all() {		return static::find_by_sql('SELECT * FROM `'. static::$table_name) .'`';	}	public static function find_by_id($id=0) {		$column = substr(static::$table_name, 0, strlen(static::$table_name)-1) . '_id';		$result_array = static::find_by_sql('SELECT * FROM `'. static::$table_name . '` WHERE `'.$column.'`="'. $id .'" LIMIT 1');		return (!empty($result_array)) ? array_shift($result_array) : false;	}	public static function find_by_sql($sql='') {		global $db;		$result = $db->query($sql);		$obj_arr = [];				while ( $row = $result->fetch_assoc() ) {			$obj_arr[] = static::instantiate($row);		}		return $obj_arr;	}	public static function count_all($table='') {		global $db;		if (!$table) {			$db->query('SELECT COUNT(*) FROM ' . static::$table_name);		} else {			$db->query('SELECT COUNT(*) FROM ' . $table);		}		$row = $db->fetch_array();		return array_shift($row);	}	private static function instantiate($record) {		if (isset($record)) {			$class_name = get_called_class();			$object = new $class_name;			foreach($record as $key => $value) {				//if ($object->has_property($key)) {					$object->$key = $value;				//} else {				//	echo 'has not <br>';				//}			}					}		return $object;	}				public function attributes() {		global $database;		$attributes = [];				foreach($this as $key => $value) {			$attributes[$key] = $value;		}		return $attributes;	}	public function has_property($property) {		$arr = $this->attributes();		return array_key_exists($property, $arr);	}	public function save() {				$id = substr(static::$table_name, 0, strlen(static::$table_name)-1) . '_id';		if ( isset($this->$id) ) {			//echo 'update';			return $this->update();					} else {			//echo 'create';			return $this->create();		}		//return isset($this->$id) ? $this->update() : $this->create();	}	public function delete() {		global $database;		$column = substr(static::$table_name, 0, strlen(static::$table_name)-1) . '_id';				$sql  = 'DELETE FROM `'.static::$table_name.'`';		$sql .= 'WHERE `'. $column .'`="'. $database->escape_string($this->$column) .'" ';		$sql .= 'LIMIT 1';		$database->query($sql);		return ($database->affected_rows() === 1) ? true : false;	}		protected function create() {		global $db;				$attributes = $this->escaped_attrs();		$sql  = 'INSERT INTO `' . static::$table_name . '` (' .  join(', ', array_keys($attributes)) . ') ';		$sql .= 'VALUES ("' . join('", "', array_values($attributes)) . '")';				$column = substr(static::$table_name, 0, strlen(static::$table_name)-1) . '_id';				if ( $db->query($sql) ) {			$this->$column = $db->insert_id();			return true;		} else {			return false;		}	}	protected function update() {		global $db;				$attributes = $this->escaped_attrs();		$attribute_pair = [];		foreach ($attributes as $key => $value) {			$attribute_pair[] = '`'. $key .'`="'. $value .'"';		}				$sql  = 'UPDATE `'. static::$table_name .'` ';		$sql .= 'SET ' . join(', ', $attribute_pair) .' ';				$column = substr(static::$table_name, 0, strlen(static::$table_name)-1) . '_id';				$sql .= 'WHERE `' . $column . '`="'. $db->escape_string($this->$column) .'"';		echo $sql;		$db->query($sql);		return ($db->affected_rows() === 1) ? true : false;	}	protected function escaped_attrs() {		global $db;		$attrs = $this->attributes();		$escaped = [];		foreach ($attrs as $k => $v) {			$escaped[$k] = $db->escape_string($v);		}		return $escaped;	}}?>